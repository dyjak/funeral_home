package zaklad.pogrzebowy.api.controllers;



import zaklad.pogrzebowy.api.models.User;
import zaklad.pogrzebowy.api.repositories.UserRepository;
import zaklad.pogrzebowy.api.security.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

/**
 * Kontroler odpowiedzialny za obs≈Çugƒô uwierzytelniania u≈ºytkownik√≥w.
 *
 * Endpointy:
 * <ul>
 *   <li>POST /auth/login ‚Äì uwierzytelnia u≈ºytkownika na podstawie adresu e-mail i has≈Ça, zwraca token JWT przy poprawnych danych.</li>
 * </ul>
 *
 * Wstrzykiwane zale≈ºno≈õci:
 * <ul>
 *   <li>UserRepository ‚Äì dostƒôp do danych u≈ºytkownik√≥w</li>
 *   <li>PasswordEncoder ‚Äì weryfikacja has≈Ça</li>
 *   <li>JwtUtil ‚Äì generowanie token√≥w JWT</li>
 * </ul>
 *
 * Kontroler umo≈ºliwia dostƒôp z dowolnego pochodzenia (CORS).
 */
@RestController
@RequestMapping("/auth")
@CrossOrigin(origins = "*") // üîπ Dla React
public class AuthController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtil jwtUtil;

    /**
     * Uwierzytelnia u≈ºytkownika na podstawie e-maila i has≈Ça.
     *
     * @param loginUser Obiekt u≈ºytkownika zawierajƒÖcy e-mail i has≈Ço (w polu passwordHash).
     * @return Token JWT w przypadku poprawnej autoryzacji lub b≈ÇƒÖd 401 w przeciwnym razie.
     */
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody User loginUser) {
        Optional<User> user = userRepository.findByEmail(loginUser.getEmail());

        if (user.isPresent() && passwordEncoder.matches(loginUser.getPasswordHash(), user.get().getPasswordHash())) {
            String token = jwtUtil.generateToken(user.get().getEmail());
            return ResponseEntity.ok().body("{\"token\": \"" + token + "\"}");
        } else {
            return ResponseEntity.status(401).body("Nieprawid≈Çowy email lub has≈Ço");
        }
    }
}